[gd_scene load_steps=5 format=3 uid="uid://cv65jnoi1cdpj"]

[ext_resource type="Texture2D" uid="uid://ccepwmremjvqx" path="res://Textures/Plazma_z_przyszosci.png" id="1_kukfy"]
[ext_resource type="Script" path="res://Scripts/deadly_area.gd" id="2_o347i"]

[sub_resource type="GDScript" id="GDScript_7nkye"]
script/source = "extends Sprite2D

@export var max_angle := 30.0
@export var max_distance := 20
@export var rotation_speed := 0.1

var moving: Array[Node2D]
var is_falling = false;

func unfollow_body(body):
	print(\"died: \" + body.name)
	moving.erase(body)

func _process(delta):
	if is_falling:
			position.y += delta * 400
			
	if moving:
		for obj in moving:
			if obj:
				var diff_x = obj.position.x - global_position.x
				if diff_x >= 0 and diff_x < max_distance and rotation > -deg_to_rad(max_angle):
					rotation = lerp_angle(rotation, rotation - deg_to_rad(max_angle), rotation_speed)
				elif diff_x < 0 and diff_x > -max_distance and rotation < deg_to_rad(max_angle):
					rotation = lerp_angle(rotation, rotation + deg_to_rad(max_angle), rotation_speed)

#func _input(event):
	#if event.is_action_pressed(\"fire\"):  # Check if the \"fire\" action is pressed
		#var local_pos = to_local(event.position)  # Convert the click to the sprite's local space
		#var sprite_size = texture.get_size()  # Get the size of the sprite's texture
		#if Rect2(Vector2.ZERO, sprite_size).has_point(local_pos):  # Check if the click is inside the sprite
			#is_falling = true

"

[sub_resource type="RectangleShape2D" id="RectangleShape2D_1iamu"]
size = Vector2(15.6667, 2)

[node name="Acid" type="Sprite2D"]
z_index = 5
position = Vector2(-1, -65)
scale = Vector2(6, 6)
texture = ExtResource("1_kukfy")
offset = Vector2(0.166381, 2.66666)
script = SubResource("GDScript_7nkye")
max_angle = 50.0

[node name="Area2D" type="Area2D" parent="."]
position = Vector2(0.0833333, -5.08333)
script = ExtResource("2_o347i")

[node name="CollisionShape2D" type="CollisionShape2D" parent="Area2D"]
position = Vector2(0.0833332, 4.75)
shape = SubResource("RectangleShape2D_1iamu")

[connection signal="body_entered" from="Area2D" to="Area2D" method="_on_body_entered"]
